// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyZen.Infrastructure.Persistence;

#nullable disable

namespace StudyZen.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231017140953_UpdateLectureSchema")]
    partial class UpdateLectureSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudyZen.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Back")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FlashcardSetId")
                        .HasColumnType("int");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardSetId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.FlashcardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("FlashcardSets");
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Course", b =>
                {
                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "CreatedBy", b1 =>
                        {
                            b1.Property<int>("CourseId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "UpdatedBy", b1 =>
                        {
                            b1.Property<int>("CourseId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("UpdatedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Flashcard", b =>
                {
                    b.HasOne("StudyZen.Domain.Entities.FlashcardSet", "FlashcardSet")
                        .WithMany("Flashcards")
                        .HasForeignKey("FlashcardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "CreatedBy", b1 =>
                        {
                            b1.Property<int>("FlashcardId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlashcardId");

                            b1.ToTable("Flashcards");

                            b1.WithOwner()
                                .HasForeignKey("FlashcardId");
                        });

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "UpdatedBy", b1 =>
                        {
                            b1.Property<int>("FlashcardId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlashcardId");

                            b1.ToTable("Flashcards");

                            b1.WithOwner()
                                .HasForeignKey("FlashcardId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("FlashcardSet");

                    b.Navigation("UpdatedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.FlashcardSet", b =>
                {
                    b.HasOne("StudyZen.Domain.Entities.Lecture", "Lecture")
                        .WithMany("FlashcardSets")
                        .HasForeignKey("LectureId");

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "CreatedBy", b1 =>
                        {
                            b1.Property<int>("FlashcardSetId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlashcardSetId");

                            b1.ToTable("FlashcardSets");

                            b1.WithOwner()
                                .HasForeignKey("FlashcardSetId");
                        });

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "UpdatedBy", b1 =>
                        {
                            b1.Property<int>("FlashcardSetId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlashcardSetId");

                            b1.ToTable("FlashcardSets");

                            b1.WithOwner()
                                .HasForeignKey("FlashcardSetId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("UpdatedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Lecture", b =>
                {
                    b.HasOne("StudyZen.Domain.Entities.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "CreatedBy", b1 =>
                        {
                            b1.Property<int>("LectureId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LectureId");

                            b1.ToTable("Lectures");

                            b1.WithOwner()
                                .HasForeignKey("LectureId");
                        });

                    b.OwnsOne("StudyZen.Domain.ValueObjects.UserActionStamp", "UpdatedBy", b1 =>
                        {
                            b1.Property<int>("LectureId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.Property<string>("User")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LectureId");

                            b1.ToTable("Lectures");

                            b1.WithOwner()
                                .HasForeignKey("LectureId");
                        });

                    b.Navigation("Course");

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("UpdatedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Course", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.FlashcardSet", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("StudyZen.Domain.Entities.Lecture", b =>
                {
                    b.Navigation("FlashcardSets");
                });
#pragma warning restore 612, 618
        }
    }
}
